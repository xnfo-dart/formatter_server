name: Build

# NOTE: Keep this file compatible for building the last tagged release.

###
#  Builds caller <ref>.
#    builds native executables for [linux,windows,mac] when called or manually triggered.
#    (Releases of formatter_server are done using semantic version tags example: "v1.2.3" on master branch)
#  Uploads all output files in one artifact as 'native-artifacts' with 'dartpolishd-[linux windows.exe mac]' executables.

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_call
# NOTE: Payload is the same as the caller.
# run-name is not used when on a workflow_call
run-name: "${{ github.workflow }} ${{ github.event.repository.name }}: ('${{ github.job || github.event_name }}' -> '${{ github.workflow }}') [ref: ${{ github.ref_name }}]"

on:
  # Context is inherited from caller (except github.job).
  # External caller (from another repo) github.ref would not be valid.
  # Note: inputs from this workflow gets added to caller event inputs
  workflow_call:
    inputs:
      last_release:
        description: "Build the last release from master? (if false, builds the <ref> of the caller)"
        required: false
        default: false
        type: boolean

  # Allows you to run this workflow manually from the Actions tab (for manual builds)
  workflow_dispatch:
    inputs:
      last_release:
        description: "Build the last release from master? (if false, builds the <ref> of the caller)"
        required: false
        default: false
        type: boolean

# run action will be from this dir
defaults:
  run:
    working-directory: formatter_server

jobs:

  test:
    uses: ./.github/workflows/test.yml

  build:
    needs: [test]
    if: needs.test.result == 'success'

    runs-on:  ${{ matrix.os }}

    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            output-name: dartpolishd-linux
          - os: macOS-latest
            output-name: dartpolishd-mac
          - os: windows-latest
            output-name: dartpolishd-windows.exe

    # Steps represent a sequence of tasks (each step is a new processes) that will be executed as part of the job
    steps:

      # https://github.com/actions/checkout
      - name: "Clone formatter_server repository"
        uses: actions/checkout@v3
        with:
          repository: xnfo-dart/formatter_server
          path: formatter_server
          ref: master # If empty it uses the github.ref_name (note: it uses the caller ref, if called externally it would not be valid here).
                      # Thats why we use master, to select the final ref below.

      # workflow_run | workflow_dispatch : ${{github.event_name}}; workflow_call : ${{(PARENT)github.event_name}};
      # Means github.event_name on a workflow_call its not an individual event, its the caller event, (its better to just check if the inputs are not null).
      - name: "Setup git ref to build"
        shell: bash
        run: |
          echo "Github event: ${{ github.event_name }}"
          git fetch --tags -f

          BUILD_REF=${{ github.ref_name }}
          # if this is a workflow_call with last_release set to true then get the last tag version.
          if [[ ${{ inputs.last_release }} == true ]]; then
              BUILD_REF=$(git tag --sort=-creatordate | awk 'match($0, /^v[0-9]+\.[0-9]+\.[0-9]+$/)' | head -n 1)
          fi
          echo "BUILD_REF=$BUILD_REF" >> $GITHUB_ENV

      - name: "Checkout ref to build"
        run: |
          echo "Using ${GITHUB_REPOSITORY#*/} @${{env.BUILD_REF}} for checkout"
          git checkout ${{env.BUILD_REF}}

      # TODO: delete this the next tag release. > v0.9.2
      - name: "Clone Local Dart Polisher package"
        uses: actions/checkout@v3
        with:
          repository: xnfo-dart/dart_polisher
          path: dart_polisher
          ref: stable

      # Uses https://github.com/dart-lang/setup-dart to get dart
      - name: "Dowload dart-sdk"
        uses: dart-lang/setup-dart@v1

      - name: Install pub dependencies
        run: dart pub get

      # Build (output is relative to ./build)
      - name : "Compile"
        id: compile
        run: dart run grinder build --output=${{ matrix.output-name }}
        continue-on-error: true # TODO: delete this line the next tag release

      # TODO: delete this the next tag release
      - name : "Compile Old"
        if: always() && steps.compile.outcome == 'failure'
        id: compileold
        run: |
          mkdir build
          dart compile exe bin/listen.dart -v -o build/${{ matrix.output-name }}

      - name : "Get built version in a env variable"
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          echo 'BUILD_COMPILED_VERSION<<EOF' >> $GITHUB_ENV
          ./build/${{ matrix.output-name }} --version >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

          VERSION_FILE="./tool/version.dart"
          if [ -f "$VERSION_FILE" ]; then
              BUILD_PACKAGE_VERSION=$(dart run tool/version.dart)
              echo "BUILD_PACKAGE_VERSION=$BUILD_PACKAGE_VERSION" >> $GITHUB_ENV
          else
              echo "BUILD_PACKAGE_VERSION=VERSION_NOT_FOUND" >> $GITHUB_ENV
          fi

          echo "Built version:"
          ./build/${{ matrix.output-name }} --version
          echo "Package version: $BUILD_PACKAGE_VERSION"
        shell: bash

      # https://github.com/actions/upload-artifact#zipped-artifact-downloads
      - name: "Upload all artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: native-executables
          path: formatter_server/build
          retention-days: 5

      # Put LICENSE file in the artifact zip from one matrix job only.
      - name: Upload LICENSE
        uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: native-executables
          path:  formatter_server/LICENSE
          retention-days: 5

      # This is in a matrix, so only output this info from one OS
      - name: Generate release data using Markdown
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo '### Build' >> $GITHUB_STEP_SUMMARY
          echo 'Compiled from git ref: `${{ env.BUILD_REF }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Compiled from package version: `${{ env.BUILD_PACKAGE_VERSION }}`' >> $GITHUB_STEP_SUMMARY
          printf -- '--version output:\n```\n${{ env.BUILD_COMPILED_VERSION }}\n```\n' >> $GITHUB_STEP_SUMMARY

          echo '' >> $GITHUB_STEP_SUMMARY

          echo '### Workflow (Data)' >> $GITHUB_STEP_SUMMARY
          echo 'Event: `${{ github.event_name }}`' >> $GITHUB_STEP_SUMMARY
          echo 'REF: `${{ github.ref_type }} : ${{ github.ref }}`' >> $GITHUB_STEP_SUMMARY
          echo 'SHA: ${{ env.GITHUB_SHA }}' >> $GITHUB_STEP_SUMMARY
          echo 'File: `build.yml`' >> $GITHUB_STEP_SUMMARY
          echo 'Repository: `xnfo-dart/formatter_server`' >> $GITHUB_STEP_SUMMARY

          echo '' >> $GITHUB_STEP_SUMMARY

          echo '#### Workflow (Called from)' >> $GITHUB_STEP_SUMMARY
          echo 'Workflow name: `${{ github.workflow }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Workflow file: `${{ github.event.workflow }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Repository: `${{ github.repository }}`' >> $GITHUB_STEP_SUMMARY

          echo '' >> $GITHUB_STEP_SUMMARY

          echo '#### Inputs' >> $GITHUB_STEP_SUMMARY
          printf 'Inputs:\n```json\n${{ toJSON(inputs) }}\n```\n' >> $GITHUB_STEP_SUMMARY
          printf 'Inputs: (Caller)\n```json\n${{ toJSON(github.event.inputs) }}\n```\n' >> $GITHUB_STEP_SUMMARY
        shell: bash

      - name: Setup build data
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p ./build-data
          echo '${{ env.BUILD_REF }}' >> ./build-data/ref
          echo '${{ env.BUILD_COMPILED_VERSION }}' >> ./build-data/version
          echo '${{ env.BUILD_PACKAGE_VERSION }}' >> ./build-data/package_version

      - name: Upload build data
        uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: build-data
          path:  formatter_server/build-data/
          retention-days: 5
