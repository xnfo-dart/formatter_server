name: onRelTAG

###
#  Builds native executables for [linux,windows,mac] when a semantic release tag is pushed.
#  Renames the output files based on OS and uploads each one separately rdy for release.
#  Finally deletes temporary artifacts
#    release.yml is automatically called when this finishes.


# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push
# https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
run-name: "${{ github.workflow }}: [on ${{ inputs.buildref == '' && github.ref_type || 'worflow_dispatch' }}] [target: ${{ inputs.buildref || github.ref_name }}] [ref: ${{ github.ref_name }}]"

# TODO: Try to prevent pushes of old tags firing this. Use workflow_dispath for old build or releases.

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

  # For testing purposes (manually fire a tag event, target sets a ref to build)
  workflow_dispatch:
    inputs:
      buildref:
        description: "'--last-release' (build the last release)  |  '<ref>' (commit/tag/branch)  |  '' (use selected ref)"
        required: false
        type: string

jobs:

  build:
    # If you use the second syntax option (without {owner}/{repo} and @{ref}) the called workflow is from the same commit as the caller workflow.
    name: "Compile native executables"
    uses: ./.github/workflows/build.yml
    # If empty, will use ref_name from this event (on push <ref> | workdlow_dispatch <ref>).
    with:
      target: ${{ inputs.buildref }}
    secrets: inherit


  release-binaries:
    name: "Upload native executables"
    needs: [build]
    if: needs.build.result == 'success'

    runs-on: ubuntu-latest

    steps:

      - name: "Download build artifacts"
        uses: actions/download-artifact@v3
        with:
          name: native-executables

      - name: Display structure of downloaded files
        run: ls -R

      - name: Rename and move files
        run: |
          mkdir -p ./bin/linux
          mv dartpolishd-linux bin/linux/dartpolishd
          mkdir -p ./bin/windows
          mv dartpolishd-windows.exe bin/windows/dartpolishd.exe
          mkdir -p ./bin/mac
          mv dartpolishd-mac bin/mac/dartpolishd

      - name: Display structure of moved files.
        run: ls -R

      # https://github.com/actions/upload-artifact#zipped-artifact-downloads
      # Make a diferent artifact for each native executable.
      - name: "Upload OS Artifacts"
        uses: actions/upload-artifact@v3.1.0
        with:
          name: dartpolishd-linux
          path: bin/linux

      # Make a diferent artifact for each native executable.
      - name: "Upload OS Artifacts"
        uses: actions/upload-artifact@v3.1.0
        with:
          name: dartpolishd-windows
          path: bin/windows

      # Make a diferent artifact for each native executable.
      - name: "Upload OS Artifacts"
        uses: actions/upload-artifact@v3.1.0
        with:
          name: dartpolishd-mac
          path: bin/mac

      # delete temporary artifacts
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            native-executables

# NOTE: ./release.yml is run after this finishes successfully.
